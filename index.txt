const express = require('express');
const app = express();
const cors = require('cors');
require('dotenv').config();
const { MongoClient, ServerApiVersion } = require('mongodb');
const { ObjectId } = require('mongodb');
const port = process.env.PORT || 5000;

// Middleware
app.use(cors());
app.use(express.json());

// DB Connect & .env process import
const uri = `mongodb+srv://${process.env.DB_USER}:${process.env.DB_PASS}@cluster0.bqiq2nz.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0`;

// Create a MongoClient API version
const client = new MongoClient(uri, {
  serverApi: {
    version: ServerApiVersion.v1,
    strict: true,
    deprecationErrors: true,
  }
});

async function run() {
  try {
    // Connect MongoDB database name
    await client.connect();
    const database = client.db('User'); 
    const usersCollection = database.collection('Data');

    // POST user data
    app.post('/user', async (req, res) => {
      const userData = req.body;
      try {
        const result = await usersCollection.insertOne(userData);
        res.status(201).send({ message: 'User data saved successfully', data: result });
      } catch (error) {
        console.error('Error saving user data:', error);
        res.status(500).send({ error: 'Failed to save user data' });
      }
    });
    //  all users
app.get('/users', async (req, res) => {
  try {
      const users = await usersCollection.find().toArray();
      res.status(200).json(users);
  } catch (error) {
      console.error('Error fetching user data:', error);
      res.status(500).send({ error: 'Failed to fetch user data' });
  }
});

// update
app.put('/user/:id', async (req, res) => {
  const { id } = req.params;
  const updatedData = { ...req.body };

  delete updatedData._id;

  try {
      const result = await usersCollection.updateOne(
          { _id: new ObjectId(id) },
          { $set: updatedData }
      );

      if (result.modifiedCount > 0) {
          res.status(200).send({ message: 'User updated successfully' });
      } else {
          res.status(404).send({ error: 'User not found or no changes made' });
      }
  } catch (error) {
      console.error('Error updating user:', error);
      res.status(500).send({ error: 'Failed to update user' });
  }
});




//  remove/Delete 
app.delete('/user/:id', async (req, res) => {
  const { id } = req.params;

  try {
      if (!ObjectId.isValid(id)) {
          return res.status(400).send({ error: 'Invalid user ID format' });
      }

      const result = await usersCollection.deleteOne({ _id: new ObjectId(id) });

      if (result.deletedCount > 0) {
          res.status(200).send({ message: 'User deleted successfully' });
      } else {
          res.status(404).send({ error: 'User not found' });
      }
  } catch (error) {
      console.error('Error deleting user:', error);
      res.status(500).send({ error: 'Failed to delete user' });
  }
});

    console.log('Connected to MongoDB');
  } catch (error) {
    console.error('Error connecting to MongoDB:', error);
  } finally {
  }
}
run().catch(console.dir);

app.get('/', (req, res) => {
  res.send('User server is running');
});

app.listen(port, () => {
  console.log(`User server is running on port ${port}`);
});
